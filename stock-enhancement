import requests
import numpy as np
import matplotlib.pyplot as plt
import json
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.impute import SimpleImputer
from sklearn.metrics import r2_score, mean_squared_error

# Replace 'YOUR_API_KEY' with your actual API key from Alpha Vantage
API_KEY = 'YOUR_API_KEY'
SYMBOL = 'AAPL'  # Symbol of the stock you want to predict

# Define the API endpoint and parameters
BASE_URL = 'https://www.alphavantage.co/query'
params = {
    'function': 'TIME_SERIES_INTRADAY',
    'symbol': SYMBOL,
    'interval': '1min',
    'apikey': API_KEY
}

def get_historical_data():
    response = requests.get(BASE_URL, params=params)
    data = response.json()

    if 'Time Series (1min)' in data:
        time_series = data['Time Series (1min)']
        df = pd.DataFrame.from_dict(time_series, orient='index')
        df.index = pd.to_datetime(df.index)
        df = df.astype(float)
        return df
    else:
        return None


from sklearn.metrics import r2_score

# Predict on the historical data
y_pred = model.predict(X)

# Calculate R-squared value
r2 = r2_score(y, y_pred)
print(f'R-squared value: {r2}')



# Retrieve historical stock prices
historical_data = get_historical_data()

if historical_data is not None:
    # Feature engineering: Create additional features (if desired)
    historical_data['prev_close'] = historical_data['4. close'].shift(1)
    historical_data['price_change'] = historical_data['4. close'] - historical_data['prev_close']

    # Prepare the data for training
    X = historical_data[['1. open', '2. high', '3. low', 'prev_close', 'price_change']].values
    y = historical_data['4. close'].values

    # Handle missing values
    imputer = SimpleImputer()
    X = imputer.fit_transform(X)

    # Train the model
    model = LinearRegression()
    model.fit(X, y)


    # Retrieve real-time data for prediction
    response = requests.get(BASE_URL, params=params)
    data = response.json()
    # Calculate accuracy


    if 'Time Series (1min)' in data:
        real_time_data = pd.DataFrame.from_dict(data['Time Series (1min)'], orient='index')
        real_time_data.index = pd.to_datetime(real_time_data.index)
        real_time_data = real_time_data.astype(float)

        # Feature engineering: Create additional features (if desired)
        real_time_data['prev_close'] = historical_data['4. close'].iloc[-1]
        real_time_data['price_change'] = real_time_data['4. close'] - real_time_data['prev_close']

        # Handle missing values
        X_real_time = real_time_data[['1. open', '2. high', '3. low', 'prev_close', 'price_change']].values
        X_real_time = imputer.transform(X_real_time)

        # Perform prediction
        predicted_price = model.predict(X_real_time)

        # Calculate accuracy metrics
        r2 = r2_score(y, model.predict(X))
        mse = mean_squared_error(y, model.predict(X))

        print(f'Predicted price for {SYMBOL}: {predicted_price[0]}')
        print(f'R-squared: {r2}')
        print(f'Mean Squared Error: {mse}')
    else:
        print('Error retrieving real-time data')
else:
    print('Error retrieving historical data')

import matplotlib.pyplot as plt

# Convert timestamps to numeric values for plotting
historical_data['timestamp'] = pd.to_numeric(historical_data.index)
real_time_data['timestamp'] = pd.to_numeric(real_time_data.index)

# Plot historical and predicted prices
plt.figure(figsize=(12, 6))
plt.plot(historical_data['timestamp'], historical_data['4. close'], label='Historical Prices', color='blue')
plt.plot(real_time_data['timestamp'], predicted_price, label='Predicted Prices', color='red', linestyle='dashed')
plt.xlabel('Timestamp')
plt.ylabel('Stock Price')
plt.title(f'{SYMBOL} Stock Price Prediction')
plt.legend()
plt.grid(True)
plt.show()

